{"version":3,"sources":["Pages/old/App.js","Store/actions.tsx","Store/index.tsx","Components/CustomSnackBar/index.tsx","Services/Utilities.ts","Services/Firebase/ConfidentialInfo.ts","Services/Firebase/Firebase.ts","Model/User.ts","Services/Firebase/FirebaseAuth.ts","Components/LoginComponent/index.tsx","Services/Firebase/Database/UserDB.ts","Components/RegisterComponent/index.tsx","Pages/Login/index.tsx","Model/Post.ts","Components/CreatePost/index.tsx","Services/Firebase/Database/PostDB.ts","Routes.tsx","Components/PostComponent/index.tsx","Pages/Home/index.tsx","Pages/Profile/index.tsx","Pages/NotFound/index.tsx","index.js","Pages/old/logo.svg"],"names":["App","ACTIONS","login","userAuthenticated","type","LOGIN","createPost","post","posts","store","getState","push","CREATE_POST","refreshPosts","REFRESH_POSTS","INITIAL_STATE","undefined","Array","VARIANT","createStore","state","action","LOGOFF","CustomSnackBar","props","icon","text","handleClose","variant","show","WARNING","SUCCESS","ERROR","INFO","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","id","className","IconButton","key","aria-label","color","onClick","Utilities","email","test","date","displayHour","year","getFullYear","month","completeLeadingZeros","getMonth","toString","day","getDate","displayedHour","this","formatHour","displaySeconds","hour","getHours","minutes","getMinutes","seconds","getSeconds","setHours","setMinutes","setSeconds","setMilliseconds","originalDate","getMidnightTime","valueOf","Date","value","numZero","zeros","iCount","slice","ConfidentialInfo","initializeFirebase","firebase","apps","length","name","initializeApp","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Gender","firebaseApp","FirebaseAuth","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","info","catch","error","signInWithEmailAndPassword","sendPasswordResetEmail","FIELD","User","firstName","gender","birthday","lastName","friends","_friends","getTime","_user","loadFriends","Object","keys","requests","map","user","UserDB","database","ref","update","getUpdatable","userID","once","dataSnapshot","getUser","exportVal","LoginComponent","field","errorMessages","Map","componentWillMount","localStorage","getItem","loginUser","displayError","displayHelperText","setHelpersText","validateEmail","set","EMAIL","PASSWORD","submitted","get","handleLogin","a","setState","forEach","keepConnected","setItem","uid","removeItem","snackBarText","showSnackBar","userUID","dispatch","Actions","parseInt","TextField","required","onChange","newValue","target","label","helperText","FormControlLabel","control","Checkbox","checked","Button","Component","connect","TABS","RegisterComponent","FIRSTNAME","handleRegister","sex","createUser","NOT_INFORM","LASTNAME","newDate","InputLabelProps","shrink","FormControl","SEX","InputLabel","Select","labelId","MenuItem","MALE","FEMALE","FormHelperText","PostVisibility","Login","authenticationCanBeChanged","history","PossibleRoutes","HOME","selectedTab","subscribe","Register","renderActiveTab","Paper","square","Tabs","event","setSelectedTab","indicatorColor","textColor","centered","Tab","Post","content","visibility","PUBLIC","_post","PostDB","reference","postID","getPost","orderByChild","getPostsFromDataSnapshot","values","promisesPosts","childSnapshot","all","CreatePost","postContent","POST_CONTENT","handlePost","idPost","setPostContent","setVisibility","handleCloseSnackBar","PRIVATE","multiline","rows","margin","PostComponent","Card","CardHeader","avatar","Avatar","title","getFullName","subheader","formatDate","CardContent","CardActions","disableSpacing","Home","componentDidMount","loadPostsFromDB","getAvailablePosts","handleLogoff","componentPosts","startIcon","Profile","NotFound","style","textAlign","to","ReactDOM","render","basename","process","path","exact","component","PROFILE","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8218af0f.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import store, { IAction, IStore } from \".\";\nimport User from \"../Model/User\";\nimport Post from \"../Model/Post\";\n\nexport enum ACTIONS {\n    LOGIN,\n    LOGOFF,\n    CREATE_POST,\n    REFRESH_POSTS\n}\n\nexport function login(userAuthenticated: User): IAction {\n    return {\n        type: ACTIONS.LOGIN,\n        userAuthenticated: userAuthenticated\n    }\n}\n\nexport function logoff(): IAction {\n    return {\n        type: ACTIONS.LOGOFF\n    }\n}\n\nexport function createPost(post: Post): IAction {\n    let posts: Array<Post> = (store.getState() as IStore).posts!;\n    posts.push(post);\n\n    return {\n        type: ACTIONS.CREATE_POST,\n        posts: posts\n    }\n}\n\nexport function refreshPosts(posts: Array<Post>): IAction {\n    return {\n        type: ACTIONS.REFRESH_POSTS,\n        posts: posts\n    }\n}","import { createStore } from 'redux';\nimport { ACTIONS } from './actions';\n\nimport User from '../Model/User';\nimport Post from '../Model/Post';\n\nexport interface IStore {\n    userAuthenticated?: User,\n    posts?: Array<Post>\n}\n\nexport interface IAction extends IStore{\n    type: string | number;\n}\n\nconst INITIAL_STATE: IStore = {\n    userAuthenticated: undefined,\n    posts: new Array<Post>()\n}\n\nfunction reducer(state: any = INITIAL_STATE, action: IAction){\n    switch(action.type){\n        case (ACTIONS.LOGIN):{\n            return {\n                ...state,\n                userAuthenticated: action.userAuthenticated\n            }\n        }\n        \n        case (ACTIONS.LOGOFF):{\n            return{\n                ...state,\n                userAuthenticated: undefined\n            }\n        }\n\n        case ACTIONS.CREATE_POST : case ACTIONS.REFRESH_POSTS: {\n            return {\n                ...state,\n                posts: action.posts\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nexport default store;","// React Imports\nimport React from 'react';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\n\n\n\n\n// Components\n\n// Model\n\n// Services\n\n// Icons\n\n// Enums\nexport enum VARIANT {\n    WARNING = 'warning',\n    SUCCESS = 'success',\n    ERROR = 'error',\n    INFO = 'info'\n}\n\ninterface IProps {\n    text: string;\n    handleClose?: () => void;\n    variant: VARIANT;\n    show: boolean;\n}\n\nexport default function CustomSnackBar(props: IProps){\n    const { text, handleClose, variant, show } = props;\n\n    let icon;\n    switch(variant){\n        case VARIANT.WARNING:\n            icon = <WarningIcon/>;  break;\n        case VARIANT.SUCCESS:\n            icon = <CheckCircleIcon/>;  break;\n        case VARIANT.ERROR:\n            icon = <ErrorIcon/>;  break;\n        case VARIANT.INFO:\n            icon = <InfoIcon/>;  break;\n    }\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n            }}\n            open={show}\n            autoHideDuration={8000}\n            onClose={handleClose}\n            ContentProps={{\n                'aria-describedby': 'message-id',\n            }}\n            message={   <span id=\"message-id\" className='message'>\n                            {icon}\n                            {text}\n                        </span>}\n            action={[\n                /*<Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={handleClose}>\n                    UNDO\n                </Button>,*/\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    className='close'\n                    onClick={handleClose}>\n                <CloseIcon />\n                </IconButton>,\n            ]}\n            className={'SnackBar ' + variant} \n            />\n    );\n}","export class Utilities{\n    \n    static validateEmail(email: string): boolean {\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n    }\n\n    static formatDate(date: Date, displayHour: boolean = false): string{\n        const year = date.getFullYear();\n        const month = Utilities.completeLeadingZeros((date.getMonth() + 1).toString(), 2); //Mês começa com 0 = Janeiro\n        const day = Utilities.completeLeadingZeros(date.getDate().toString(), 2);\n        let displayedHour = '';\n        \n        if (displayHour)\n            displayedHour = ' ' + this.formatHour(date);\n\n        return day + '/' + month + '/' + year + displayedHour;\n    }\n    \n    static formatHour(date: Date, displaySeconds: boolean = false): string{\n        const hour = Utilities.completeLeadingZeros(date.getHours().toString(), 2);\n        const minutes = Utilities.completeLeadingZeros(date.getMinutes().toString(), 2);\n        const seconds = displaySeconds ? ':' + Utilities.completeLeadingZeros(date.getSeconds().toString(), 2) : '';\n        return hour + ':' + minutes + seconds;\n    }\n\n    private static getMidnightTime(date: Date): Date {\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n\n        return date;\n    }\n\n    static translateDateToText(date: Date): string {\n        let originalDate: Date = date;\n        if (this.getMidnightTime(date).valueOf() === this.getMidnightTime(new Date()).valueOf() )\n            return 'Today at ' + this.formatHour(originalDate); // Today\n        else\n            return '';\n    }\n\n    static completeLeadingZeros(value: string, numZero: number): string {\n        let zeros = '';\n        for (let iCount = 0; iCount < numZero; iCount++)    zeros = '0' + zeros;\n        return (zeros + value).slice(-numZero);\n    }\n}","export default class ConfidentialInfo {\n    public static firebaseConfig = {\n        apiKey: \"AIzaSyDS1v5erkI8ArkEpO_NoEDRv4wcDDLIu5I\",\n        authDomain: \"socialnetwork-d9478.firebaseapp.com\",\n        databaseURL: \"https://socialnetwork-d9478.firebaseio.com\",\n        projectId: \"socialnetwork-d9478\",\n        storageBucket: \"socialnetwork-d9478.appspot.com\",\n        messagingSenderId: \"1077042299179\",\n        appId: \"1:1077042299179:web:4048574ca3f2bcffa4456e\"\n    };\n}","import firebase from 'firebase';\nimport ConfidentialInfo from './ConfidentialInfo';\n\nexport function initializeFirebase(){\n    for (let iCount = 0; iCount < firebase.apps.length; iCount++){\n        if (firebase.apps[iCount].name == '[DEFAULT]')\n            return;\n    }\n    firebase.initializeApp(ConfidentialInfo.firebaseConfig);\n}\n\nexport const firebaseApp = firebase;","export enum Gender{\n    MALE,\n    FEMALE,\n    NOT_INFORM\n}\n\nexport default class User{\n    id: string = '';\n    email: string;\n    firstName: string;\n    lastName: string;\n    gender: Gender;\n    birthday?: Date;\n    friends: Array<User>; // Not persisted on database\n    //posts\n\n    _friends: Array<string>; // Users ID - Persisted on database\n\n    constructor(email: string, firstName: string, gender: Gender, birthday?: Date,  lastName: string = ''){\n        this.email = email;\n        this.firstName = firstName;\n        this.gender = gender;\n        \n        this.birthday = birthday;\n        this.lastName = lastName;\n        \n        this.friends = new Array<User>();\n        this._friends = new Array<string>();\n    }\n\n    getFullName(): string{\n        return this.firstName + ' ' + this.lastName;\n    }\n\n    getUpdatable(){\n        return {\n            'id': this.id,\n            'email': this.email,\n            'firstName': this.firstName,\n            'lastName': this.lastName,\n            'gender': this.gender,\n            'birthday': this.birthday != undefined ? this.birthday.getTime() : null,\n            'friends': this._friends\n        }\n    }\n\n    static getUser(_user: any, loadFriends: boolean = false): User {\n        let id: string = _user.id;\n        let email: string = _user.email;\n        let firstName: string = _user.firstName;\n        let lastName: string = _user.lastName;\n        let gender: Gender = _user.gender;\n        let birthday: Date | undefined = _user.birthday ? new Date(_user.birthday) : undefined;\n        let _friends: Array<string> = _user.friends ? Object.keys(_user.requests).map(iCount => _user.friends[iCount]) : new Array<string>();\n        let friends: Array<User> = new Array<User>();\n        if (loadFriends)\n            friends = new Array<User>();\n\n        let user: User = new User(email, firstName, gender, birthday, lastName);\n        user.id = id;\n        user._friends = _friends;\n        user.friends = friends;\n\n        return user;\n    }\n}","import {firebaseApp} from './Firebase';\nimport {initializeFirebase} from './Firebase';\n\nexport class FirebaseAuth {\n\n    static createUser(email: string, password: string): Promise<firebase.auth.UserCredential> {\n        initializeFirebase();\n    \n        return new Promise((resolve, reject) => {\n            firebaseApp.auth().createUserWithEmailAndPassword(email, password).then((info) => {\n                resolve(info);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    \n    static loginUser(email: string, password: string): Promise<firebase.auth.UserCredential> {\n        initializeFirebase();\n    \n        return new Promise((resolve, reject) => {\n            firebaseApp.auth().signInWithEmailAndPassword(email, password).then((info) => {\n                resolve(info);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    \n    static async resetPassword(email: string): Promise<void> {\n        initializeFirebase();\n\n        await firebaseApp.auth().sendPasswordResetEmail(email);\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport '../../Pages/Login/styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CloseIcon from '@material-ui/icons/Close';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport User, { Gender } from '../../Model/User';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport {FirebaseAuth} from '../../Services/Firebase/FirebaseAuth';\nimport {UserDB} from '../../Services/Firebase/Database/UserDB';\n\n// Icons\n\n\n// Enums\nenum FIELD {\n    EMAIL,\n    FIRSTNAME,\n    LASTNAME,\n    PASSWORD,\n    SEX,\n    BIRHTDAY\n}\n\n// Interfaces\ninterface IProps {\n    dispatch: any,\n    userAuthenticated?: User\n}\n\ninterface IState {\n    submitted: boolean,\n    email: string,\n    password: string,\n    showSnackBar: boolean,\n    snackBarText: string,\n    keepConnected: boolean\n}\n\nclass LoginComponent extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n    \n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            email: '',\n            password: '',\n            showSnackBar: false,\n            snackBarText: '',\n            keepConnected: true\n        };\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n    \n    componentWillMount = () => {\n        const userID = localStorage.getItem('@SocialNetwork/uid');\n        if (userID)\n            this.loginUser(userID);\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {email, password} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (!Utilities.validateEmail(email))\n            message =  'Email address is not valid';\n        this.errorMessages.set(FIELD.EMAIL, message);\n\n        // Password\n        message = '';\n        if (password.length === 0)\n            message =  'Password is required';\n        this.errorMessages.set(FIELD.PASSWORD, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n    \n    handleLogin = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {email, password, keepConnected} = this.state;\n            FirebaseAuth.loginUser(email, password).then((info) => {\n                if (keepConnected)\n                    localStorage.setItem('@SocialNetwork/uid', info.user!.uid);\n                else\n                    localStorage.removeItem('@SocialNetwork/uid');\n\n                this.loginUser(info.user!.uid);\n            }).catch(async (error) => {\n                await this.setState({snackBarText: error.message})\n                this.setState({showSnackBar: true});\n            });\n        }\n    }\n\n    loginUser = (userUID: string) => {\n        UserDB.getUser(userUID).then((user) => {\n            this.props.dispatch(Actions.login(user));\n        });\n    }\n    \n    handleClose = () => this.setState({showSnackBar: false});\n\n    render(){   \n        const {email, password, showSnackBar, snackBarText, keepConnected} = this.state;\n        \n        this.setHelpersText();\n        return(\n            <div className=\"componentContainer componentLoginContainer\">\n                <div className=\"componentWelcome\">\n                    Good to see you again. Welcome!\n                </div>\n\n                <CustomSnackBar\n                    variant = {VARIANT.ERROR}\n                    handleClose={this.handleClose}\n                    show={showSnackBar}\n                    text={snackBarText}/>\n\n                <form className=\"componentForm componentLoginForm\">\n                    <TextField\n                        required\n                        error = {this.displayError(FIELD.EMAIL)}\n                        value={email}\n                        onChange = {newValue => this.setState({email: newValue.target.value}) }\n                        id=\"email\"\n                        label=\"E-mail\"\n                        helperText = {this.displayHelperText(FIELD.EMAIL)}\n                        variant=\"outlined\"/>\n\n                    <TextField \n                        required\n                        error = {this.displayError(FIELD.PASSWORD)}\n                        value={password}\n                        onChange = {newValue => this.setState({password: newValue.target.value})}\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        helperText = {this.displayHelperText(FIELD.PASSWORD)}\n                        variant=\"outlined\"/>\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={keepConnected}\n                                onChange={newValue => this.setState({keepConnected: newValue.target.checked }) }\n                                value={keepConnected}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Keep connected\"/>\n\n                </form>\n\n                <div className=\"formSubmit\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className='submitButton'\n                        onClick = {this.handleLogin}>\n                        Login\n                    </Button>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({\n    userAuthenticated: state.userAuthenticated}) ) (LoginComponent)","import {firebaseApp, initializeFirebase} from '../Firebase';\n\nimport User from '../../../Model/User';\n\nexport class UserDB {\n    static async createUser(user: User): Promise<void> {\n        initializeFirebase();\n\n        await firebaseApp.database().ref('users/' + user.id).update(user.getUpdatable());\n    }\n\n    static getUser(userID: string): Promise<User> {\n        initializeFirebase();\n\n        return new Promise((resolve, reject) => {\n            firebaseApp.database().ref('users/' + userID).once('value', (dataSnapshot) => {\n                const user: User = User.getUser(dataSnapshot.exportVal());\n                resolve(user);\n            });\n        })\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport '../../Pages/Login/styles.css'\nimport profilePicture from '../../Resources/ProfilePicture.png';\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport User, {Gender} from '../../Model/User';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport {FirebaseAuth} from '../../Services/Firebase/FirebaseAuth';\nimport {UserDB} from '../../Services/Firebase/Database/UserDB';\n\n// Icons\n\n// Enums\nenum FIELD {\n    EMAIL,\n    FIRSTNAME,\n    LASTNAME,\n    PASSWORD,\n    SEX,\n    BIRHTDAY\n}\n\n// Interfaces\ninterface IProps {\n    dispatch: any,\n    userAuthenticated?: User\n}\n\ninterface IState {\n    submitted: boolean,\n    email: string,\n    firstName: string,\n    lastName: string,\n    password: string,\n    sex: Gender,\n    birthday?: Date,\n    showSnackBar: boolean,\n    snackBarText: string\n}\n\nclass RegisterComponent extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n\n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            email: '',\n            firstName: '',\n            lastName: '',\n            password: '',\n            sex: Gender.NOT_INFORM,\n            birthday: undefined,\n            showSnackBar: false,\n            snackBarText: ''\n        }\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {email, password, firstName} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (!Utilities.validateEmail(email))\n            message =  'Email address is not valid';\n        this.errorMessages.set(FIELD.EMAIL, message);\n\n        // FirstName\n        message = '';\n        if (firstName.length === 0)\n            message =  'First Name Required';;\n        this.errorMessages.set(FIELD.FIRSTNAME, message);\n        \n        // Password\n        message = '';\n        if (password.length === 0)\n            message =  'Password is required';\n        this.errorMessages.set(FIELD.PASSWORD, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n    \n    handleRegister = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {email, password, firstName, lastName, sex, birthday} = this.state;\n            let user: User = new User(email, firstName, sex, birthday, lastName);\n\n            FirebaseAuth.createUser(email, password).then(async (info) => {\n                user.id = info.user!.uid;\n                await UserDB.createUser(user);\n                this.props.dispatch(Actions.login(user));\n            }).catch( async (error) => {\n                await this.setState({snackBarText: error.message})\n                this.setState({showSnackBar: true});\n            });\n        }\n    }\n\n    handleClose = () => this.setState({showSnackBar: false});\n\n    render(){\n        const {email, password, firstName, lastName, sex, birthday, showSnackBar, snackBarText} = this.state;\n\n        this.setHelpersText();\n        return(\n            <div className=\"componentContainer\">\n                <div className=\"componentWelcome\">\n                    Welcome to mine, yours, our Social Network!\n                </div>\n    \n                <CustomSnackBar\n                    variant = {VARIANT.ERROR}\n                    handleClose={this.handleClose}\n                    show={showSnackBar}\n                    text={snackBarText}/>\n\n                <form className='componentForm'>\n                        <TextField\n                            required\n                            error = {this.displayError(FIELD.EMAIL)}\n                            value={email}\n                            onChange = {newValue => this.setState({email: newValue.target.value}) }\n                            id=\"email\"\n                            label=\"E-mail\"\n                            helperText = {this.displayHelperText(FIELD.EMAIL)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            required\n                            error = {this.displayError(FIELD.PASSWORD)}\n                            value={password}\n                            onChange = {newValue => this.setState({password: newValue.target.value}) }\n                            id=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            helperText = {this.displayHelperText(FIELD.PASSWORD)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            required\n                            error = {this.displayError(FIELD.FIRSTNAME)}\n                            value={firstName}\n                            onChange = {newValue => this.setState({firstName: newValue.target.value}) }\n                            id=\"firstName\"\n                            label=\"First name\"\n                            helperText = {this.displayHelperText(FIELD.FIRSTNAME)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            id=\"lastName\"\n                            value={lastName}\n                            onChange = {newValue => this.setState({lastName: newValue.target.value}) }\n                            error = {this.displayError(FIELD.LASTNAME)}\n                            label=\"Last name\"\n                            helperText = {this.displayHelperText(FIELD.LASTNAME)}\n                            variant=\"outlined\"/>\n    \n                        <TextField\n                            id=\"date\"\n                            label=\"Date of birth\"\n                            type=\"date\"\n                            value={birthday}\n                            onChange = {newValue => {\n                                let newDate: Date | null;\n                                newDate = new Date(newValue.target.value);\n                                if (newDate.getFullYear() > 1000)\n                                    this.setState({birthday: newDate})\n                            }}\n                            className = 'inputDate'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"outlined\"\n                            />\n    \n                        <FormControl\n                            variant=\"outlined\"\n                            error={this.displayError(FIELD.SEX)}>\n                            <InputLabel id=\"demo-simple-select-error-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-error-label\"\n                                id=\"demo-simple-select-error\"\n                                value={sex}\n                                onChange={newValue => this.setState({sex: newValue.target.value as Gender})}\n                                >\n                                <MenuItem value={Gender.MALE}>Male</MenuItem>\n                                <MenuItem value={Gender.FEMALE}>Female</MenuItem>\n                                <MenuItem value={Gender.NOT_INFORM}>Not informed</MenuItem>\n                            </Select>\n                            <FormHelperText>{this.displayHelperText(FIELD.SEX)}</FormHelperText>\n                        </FormControl>\n    \n                </form>\n    \n                <div className = 'formSubmit'>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className='submitButton'\n                        onClick = {this.handleRegister}>\n                        Register\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default connect((state: IStore) => ({\n    userAuthenticated: state.userAuthenticated}) ) (RegisterComponent)","// React Imports\nimport React, { Component } from 'react';\n\n// Router\nimport { Link } from 'react-router-dom'\nimport {PossibleRoutes} from '../../Routes';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n// Components\nimport LoginComponent from '../../Components/LoginComponent';\nimport RegisterComponent from '../../Components/RegisterComponent';\n\n// Model\nimport User from '../../Model/User';\n\n// Services\n\n// Icons\n\n// Enums\nenum TABS {\n    Login,\n    Register\n}\n\n// Interfaces\ninterface IProps {\n    userAuthenticated?: User,\n    dispatch: any,\n    history: any\n}\n\ninterface IState {\n    selectedTab: TABS\n}\n\nclass Login extends Component<IProps, IState>{\n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            selectedTab: TABS.Login\n        };\n\n        store.subscribe(this.authenticationCanBeChanged);\n    }\n\n    authenticationCanBeChanged = () => {\n        if ((store.getState() as IStore).userAuthenticated !== undefined)\n            this.props.history.push(PossibleRoutes.HOME);\n    }\n\n    setSelectedTab(newValue: TABS){\n        this.setState({selectedTab: newValue});\n    }\n    \n    renderActiveTab(){\n        switch (this.state.selectedTab) {\n            case TABS.Login:\n                return <LoginComponent/>\n            case TABS.Register:\n                return <RegisterComponent/>\n            default:\n                return <h1>Falha no sistema</h1>\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"login-container\">\n                {this.renderActiveTab()}\n\n                <Paper square className='bottomTabs'>\n                    <Tabs\n                    value={this.state.selectedTab}\n                    onChange={(event, value) => this.setSelectedTab(value) }\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    centered\n                    aria-label=\"icon label tabs example\">\n                        <Tab value = {TABS.Login}    label=\"Login\" />\n                        <Tab value = {TABS.Register} label=\"Create account\" />\n                    </Tabs>\n                </Paper>\n\n        </div>\n        );\n    }\n}\n\nexport default Login;","import User from './User';\nimport PostEdited from './PostEdited';\nimport { UserDB } from '../Services/Firebase/Database/UserDB';\n\nexport enum PostVisibility{\n    PUBLIC,\n    PRIVATE\n}\n\nexport default class Post {\n    id: string = '';\n    user: User; // Not persisted on database\n    date: Date;\n    content: string;\n    history: Array<PostEdited>;\n    visibility: PostVisibility;\n\n    _user: string; // UserID - Persisted on database\n\n    constructor(user: User, date: Date, content: string, visibility: PostVisibility = PostVisibility.PUBLIC){\n        this.user = user;\n        this._user = user.id;\n        this.date = date;\n        this.content = content;\n        this.visibility = visibility;\n\n        this.history = new Array<PostEdited>();\n    }\n\n    getUpdatable() {\n        return {\n            'id': this.id,\n            'user': this._user,\n            'date': this.date.getTime(),\n            'content': this.content,\n            'visibility': this.visibility,\n            'history': this.history\n        }\n    }\n\n    static async getPost(_post: any, loadUser: boolean = false, loadHistory: boolean = false): Promise<Post> {\n        let id: string = _post.id;\n        let _user: string = _post.user;\n        let date: Date = new Date(_post.date);\n        let content: string = _post.content;\n        let visibility: PostVisibility = _post.visibility;\n        let history: Array<PostEdited> = _post.history ? Object.keys(_post.history).map(iCount => _post.history[iCount]) : new Array<PostEdited>();\n\n        return new Promise(async (resolve, reject) => {\n            let user = await UserDB.getUser(_user);\n            \n            let post: Post = new Post(user, date, content, visibility);\n            post.id = id;\n            post._user = _user;\n            post.history = history;\n\n            resolve(post);\n        });\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport store, { IStore } from '../../Store/index';\nimport * as Actions from '../../Store/actions';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport Post from '../../Model/Post';\nimport User from '../../Model/User';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport {PostDB} from '../../Services/Firebase/Database/PostDB';\nimport { PostVisibility } from '../../Model/Post';\n\n// Icons\n\ninterface IProps {\n    dispatch: any\n}\n\ninterface IState {\n    submitted: boolean,\n    visibility: PostVisibility,\n    postContent: string,\n    showSnackBar: boolean\n}\n\nenum FIELD {\n    POST_CONTENT\n}\n\nclass CreatePost extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n    \n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            visibility: PostVisibility.PRIVATE,\n            postContent: '',\n            showSnackBar: false\n        }\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {postContent} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (postContent.length === 0)\n            message =  'Post content required';\n        this.errorMessages.set(FIELD.POST_CONTENT, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n\n    handlePost = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {postContent, visibility} = this.state;\n            const user: User = (store.getState() as IStore).userAuthenticated!;\n            \n            const post: Post = new Post(user, new Date(), postContent, visibility);\n            PostDB.createPost(post).then((idPost) => {\n                this.props.dispatch(Actions.createPost(post));\n                this.setState({submitted: false, showSnackBar: true, postContent: ''});\n            });\n        }\n    }\n\n    setPostContent = (newValue: string) => this.setState({postContent: newValue});\n    setVisibility = (newValue: PostVisibility) => this.setState({visibility: newValue});\n    handleCloseSnackBar = () => this.setState({showSnackBar: false})\n    \n    render(){\n        const {visibility, postContent, showSnackBar} = this.state;\n\n        this.setHelpersText();\n        return(\n            <div className=\"createPostContainer\">\n    \n                <CustomSnackBar\n                    variant = {VARIANT.SUCCESS}\n                    handleClose={this.handleCloseSnackBar}\n                    show={showSnackBar}\n                    text='Post created'/>\n\n                <div className=\"contentArea\">\n                    <TextField\n                        id=\"outlined-multiline-static\"\n                        label=\"What's going on?\"\n                        multiline\n                        rows=\"4\"\n                        value={postContent}\n                        onChange = {newValue => this.setPostContent(newValue.target.value)}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        error = {this.displayError(FIELD.POST_CONTENT)}\n                        helperText = {this.displayHelperText(FIELD.POST_CONTENT)}\n                        />\n                </div>\n    \n                <div className=\"bottomButtons\">\n                    <FormControl \n                        variant=\"outlined\"\n                        className = 'formChooseVisibility'>\n                        <Select\n                            labelId=\"demo-simple-select-error-label\"\n                            id=\"demo-simple-select-error\"\n                            value={visibility}\n                            onChange={newValue => this.setVisibility(newValue.target.value as PostVisibility)}\n                            >\n                            <MenuItem value={PostVisibility.PRIVATE}>Only friends</MenuItem>\n                            <MenuItem value={PostVisibility.PUBLIC}>Public</MenuItem>\n                        </Select>\n                    </FormControl>\n    \n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick = {this.handlePost}\n                        className = 'formSubmit'>\n                        Post\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({}) ) (CreatePost)","import {firebaseApp, initializeFirebase} from '../Firebase';\n\nimport Post from '../../../Model/Post';\nimport User, { Gender } from '../../../Model/User';\n\nexport class PostDB {\n    static async createPost(post: Post): Promise<string> {\n        initializeFirebase();\n\n        const reference = await firebaseApp.database().ref('posts').push();\n        post.id = reference.key!;\n        await firebaseApp.database().ref('posts/' + reference.key).update(post.getUpdatable());\n        return new Promise((resolve, reject) => resolve(reference.key!));\n    }\n\n    static getPost(postID: string): Promise<Post> {\n        initializeFirebase();\n\n        return new Promise<Post>((resolve) => {\n            firebaseApp.database().ref('posts/' + postID).once('value', async (dataSnapshot) => {\n                const post = await Post.getPost(dataSnapshot.exportVal());\n                resolve(post);\n            });\n        });\n    }\n\n    static getAvailablePosts(): Promise<Array<Post>> {\n        initializeFirebase();\n        \n        let posts: Array<Post> = new Array<Post>();\n\n        return new Promise<Array<Post>>((resolve, reject) => {\n            /*posts.push(new Post(new User('claudineibjr', 'Cla', Gender.MALE), new Date(), 'A'));\n            posts.push(new Post(new User('claudineibjr', 'Cla', Gender.MALE), new Date(), 'B'));\n            posts.push(new Post(new User('claudineibjr', 'Cla', Gender.MALE), new Date(), 'C'));\n            resolve(posts);*/\n\n            firebaseApp.database().ref('posts/').orderByChild('date').once('value', \n                (dataSnapshot) => {\n                    this.getPostsFromDataSnapshot(dataSnapshot).then((values) => {\n                        resolve(values);\n                    });\n            });\n        });\n    }\n\n    static getPostsFromDataSnapshot(dataSnapshot: firebase.database.DataSnapshot): Promise<Array<Post>>{\n        return new Promise<Array<Post>>((resolve, reject) => {\n            let promisesPosts: Array<Promise<Post>> = new Array<Promise<Post>>();\n\n            dataSnapshot.forEach((childSnapshot) => {\n                promisesPosts.push(new Promise<Post>((resolve, reject) => {\n                    Post.getPost(childSnapshot.exportVal()).then((post) =>{\n                        resolve(post);\n                    });\n                }));\n            });\n            \n            Promise.all(promisesPosts).then((values) => {\n                resolve(values);\n            });\n        });\n    }\n\n    /*static getPost(userID: string): Promise<User> {\n        initializeFirebase();\n\n        return new Promise((resolve, reject) => {\n            firebaseApp.database().ref('users/' + userID).once('value', (dataSnapshot) => {\n                const user: User = User.getUser(dataSnapshot.exportVal());\n                resolve(user);\n            });\n        })\n    }*/\n}","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from './Store';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Login from './Pages/Login';\nimport Home from './Pages/Home';\nimport Profile from './Pages/Profile';\nimport NotFound from './Pages/NotFound';\n\nexport enum PossibleRoutes{\n    LOGIN = '/login',\n    HOME = '/home',\n    PROFILE = '/profile'\n}\n\nexport default function Routes(){\n    return(\n        <Provider store={store} >\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path='/' exact component={Login}/>\n                    <Route path={PossibleRoutes.LOGIN} component={Login}/>\n                    <Route path={PossibleRoutes.HOME} component={Home}/>\n                    <Route path={PossibleRoutes.PROFILE} component={Profile}/>\n                    <Route component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    )\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\n// Components\n\n// Model\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\n\n// Icons\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport Post from '../../Model/Post';\n\ninterface Props {\n    post: Post\n}\n\ninterface State {\n\n}\n\nexport default class PostComponent extends Component<Props, State>{\n    constructor(props: Props){\n        super(props);\n    }\n    \n    render(){\n        return(\n            <div className=\"postContainer\">\n                <Card className='cardContainer'>\n                    <CardHeader\n                        avatar = {<Avatar aria-label=\"recipe\"> C </Avatar>}\n                        title={this.props.post.user.getFullName()}\n                        subheader={Utilities.formatDate(this.props.post.date, true)}/>\n                    \n                    <CardContent>\n                        {this.props.post.content}\n                    </CardContent>\n\n                    <CardActions disableSpacing>\n                        <IconButton aria-label=\"edit\">\n                            <EditIcon />\n                        </IconButton>\n                        \n                        <IconButton aria-label=\"delete\">\n                            <DeleteForeverIcon />\n                        </IconButton>\n                    </CardActions>\n\n                </Card>\n            </div>\n        )\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport store, { IStore } from '../../Store/index';\nimport * as Actions from '../../Store/actions';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\n\n// Components\nimport CreatePost from '../../Components/CreatePost';\nimport PostComponent from '../../Components/PostComponent';\n\n// Model\nimport Post, { PostVisibility } from '../../Model/Post';\nimport User, { Gender } from '../../Model/User';\n\n// Services\nimport {PostDB} from '../../Services/Firebase/Database/PostDB';\n\n// Icons\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { PossibleRoutes } from '../../Routes';\nimport { UserDB } from '../../Services/Firebase/Database/UserDB';\n\ninterface IProps {\n    dispatch: any,\n    posts?: Array<Post>,\n    userAuthenticated?: User,\n    history: any\n}\n\ninterface IState {\n\n}\n\nclass Home extends Component<IProps, IState> {\n    constructor(props: IProps){\n        super(props);\n    }\n\n    componentWillMount = async() => {\n        if ( !(store.getState() as IStore).userAuthenticated ){\n            const userID = localStorage.getItem('@SocialNetwork/uid');\n            if (userID){\n                const user = await UserDB.getUser(userID);\n                this.props.dispatch(Actions.login(user));\n            }\n        }\n    }\n\n    componentDidMount = () => {\n        this.loadPostsFromDB();\n    }\n\n    loadPostsFromDB = async () => {\n        let posts: Array<Post> = await PostDB.getAvailablePosts();\n        this.props.dispatch(Actions.refreshPosts(posts));\n    }\n\n    handleLogoff = () => {\n        localStorage.removeItem('@SocialNetwork/uid');\n        this.props.dispatch(Actions.logoff());\n        this.props.history.push(PossibleRoutes.LOGIN);\n    }\n\n    render(){\n        let {posts, userAuthenticated} = this.props;\n\n        const componentPosts =  posts!.map((post, key) => \n                                    <PostComponent post = {post}/>\n                                );\n\n        return(\n            <div className=\"homePageContainer\">\n\n                {userAuthenticated &&\n                    <div className=\"onlyAuthenticated\">\n                        <div className=\"headerContainer\">\n                            <div className=\"profileContainer\">\n                                <Avatar aria-label=\"recipe\"> C </Avatar>\n                                <div className=\"profileName\">\n                                    {userAuthenticated!.getFullName()}\n                                </div>\n                            </div>\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={this.handleLogoff}\n                                startIcon={<ExitToAppIcon />}>\n                                Logoff\n                            </Button>\n\n                        </div>\n\n                        <CreatePost/>\n                    </div>\n                }\n                \n                {componentPosts}\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({\n    posts: state.posts,\n    userAuthenticated: state.userAuthenticated}) ) (Home)","// React Imports\nimport React from 'react';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\n\n// Components\n\n// Model\n\n// Services\n\n// Icons\n\n\nexport default function Profile(){\n    return (\n        <h1>Hello World! Profile</h1>\n    );\n}","// React Imports\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function NotFound(){\n    return (\n        <h1 style={{textAlign:\"center\"}}>\n            Page not Found<br/>\n            <Link to=\"/\">Go to Home </Link>\n        </h1>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Pages/old/App';\nimport Routes from './Routes';\n\nimport './Styles/general.css';\n\nReactDOM.render(<Routes/>, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}