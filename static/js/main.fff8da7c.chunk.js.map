{"version":3,"sources":["Store/actions.tsx","Store/index.tsx","Components/CustomSnackBar/index.tsx","Services/Utilities.ts","Services/Firebase/ConfidentialInfo.ts","Services/Firebase/Firebase.ts","Model/User.ts","Services/Firebase/FirebaseAuth.ts","Components/LoginComponent/index.tsx","Services/Firebase/Database/UserDB.ts","Components/RegisterComponent/index.tsx","Services/Firebase/CloudStorage.ts","Pages/Login/index.tsx","Model/Post.ts","Components/CreatePost/index.tsx","Services/Firebase/Database/PostDB.ts","Components/PostComponent/index.tsx","Model/PostEdited.ts","Pages/Home/index.tsx","Routes.tsx","Pages/Profile/index.tsx","Pages/NotFound/index.tsx","index.js"],"names":["ACTIONS","login","userAuthenticated","type","LOGIN","createPost","post","posts","store","getState","push","CREATE_POST","refreshPosts","REFRESH_POSTS","updatePost","postToDeleteIndex","indexOf","UPDATE_POST","INITIAL_STATE","undefined","Array","VARIANT","createStore","state","action","LOGOFF","DELETE_POST","CustomSnackBar","props","icon","text","handleClose","variant","show","WARNING","SUCCESS","ERROR","INFO","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","id","className","IconButton","key","aria-label","color","onClick","Utilities","email","test","date","displayHour","year","getFullYear","month","completeLeadingZeros","getMonth","toString","day","getDate","displayedHour","this","formatHour","displaySeconds","hour","getHours","minutes","getMinutes","seconds","getSeconds","setHours","setMinutes","setSeconds","setMilliseconds","originalDate","getMidnightTime","valueOf","Date","value","numZero","zeros","iCount","slice","ConfidentialInfo","initializeFirebase","firebase","apps","length","name","initializeApp","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Gender","firebaseApp","FirebaseAuth","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","info","catch","error","signInWithEmailAndPassword","sendPasswordResetEmail","FIELD","User","firstName","gender","lastName","friends","hasImage","_friends","_user","loadFriends","Object","keys","requests","map","user","UserDB","database","ref","update","getUpdatable","userID","once","dataSnapshot","getUser","exportVal","LoginComponent","field","errorMessages","Map","componentWillMount","localStorage","getItem","loginUser","displayError","displayHelperText","setHelpersText","validateEmail","set","EMAIL","PASSWORD","submitted","get","handleLogin","a","setState","forEach","keepConnected","setItem","uid","removeItem","snackBarText","showSnackBar","userUID","dispatch","Actions","parseInt","TextField","required","onChange","newValue","target","label","helperText","FormControlLabel","control","Checkbox","checked","Button","Component","connect","CloudStorage","imageFile","postImageReference","storage","child","put","uploadImage","postID","imageReference","getDownloadURL","URL","downloadImage","delete","deleteImage","TABS","RegisterComponent","FIRSTNAME","handleRegister","sex","pictureFile","createUser","uploadUserImage","handleImageSelected","file","fileReader","FileReader","onloadend","picturePreviewURL","result","readAsDataURL","handleRemoveProfilePicture","NOT_INFORM","LASTNAME","FormControl","SEX","InputLabel","Select","labelId","MenuItem","MALE","FEMALE","FormHelperText","accept","files","htmlFor","component","src","PostVisibility","Login","authenticationCanBeChanged","history","PossibleRoutes","HOME","selectedTab","subscribe","Register","renderActiveTab","Paper","square","Tabs","event","setSelectedTab","indicatorColor","textColor","centered","Tab","Post","content","visibility","PUBLIC","hasPicture","_date","_inverseDate","userStr","getTime","_post","PostDB","reference","orderByChild","getBaseQuery","getPostsFromDataSnapshot","values","promisesPosts","childSnapshot","publicPost","ownPost","getPost","all","remove","CreatePost","postContent","POST_CONTENT","handlePost","idPost","uploadPostImage","setPostContent","setVisibility","handleCloseSnackBar","handleCancelPicture","PRIVATE","textFieldFocused","multiline","rows","onFocus","onBlur","margin","PostEdited","ViewOption","PostComponent","componentDidMount","userAvatar","avatar","downloadPostImage","pictureURL","handleEdit","editingPost","editingText","handleOpenDeleteDialog","displayDeleteDialog","handleCloseDeleteDialog","handleSaveEdit","handleCancelEdit","setDate","deletePostImage","confirmDelete","deletePost","splice","handleDeletePicture","handleChangePicture","newPicture","postImage_hasImageAndEditing","postImage_hasntImageAndEditing","postImage_hasImageAndNotEditing","downloadUserImage","Avatar","alt","getFirstLetter","$postImage","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Card","CardHeader","title","getFullName","subheader","formatDate","CardContent","CardActions","disableSpacing","Home","loadPostsFromDB","getAvailablePosts","loadPostsAccordingToViewOption","handleLogoff","viewOption","newPosts","AllPosts","My","filter","find","Private","Public","FromOther","setViewOption","newViewOption","componentPosts","startIcon","AppBar","position","Toolbar","Typography","Radio","labelPlacement","disabled","Profile","NotFound","style","textAlign","to","ReactDOM","render","basename","process","path","exact","PROFILE","document","getElementById"],"mappings":"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","file":"static/js/main.fff8da7c.chunk.js","sourcesContent":["import store, { IAction, IStore } from \".\";\nimport User from \"../Model/User\";\nimport Post from \"../Model/Post\";\n\nexport enum ACTIONS {\n    LOGIN,\n    LOGOFF,\n    CREATE_POST,\n    REFRESH_POSTS,\n    DELETE_POST,\n    UPDATE_POST\n}\n\nexport function login(userAuthenticated: User): IAction {\n    return {\n        type: ACTIONS.LOGIN,\n        userAuthenticated: userAuthenticated\n    }\n}\n\nexport function logoff(): IAction {\n    return {\n        type: ACTIONS.LOGOFF\n    }\n}\n\nexport function createPost(post: Post): IAction {\n    let posts: Array<Post> = (store.getState() as IStore).posts!;\n    posts.push(post);\n\n    return {\n        type: ACTIONS.CREATE_POST,\n        posts: posts\n    }\n}\n\nexport function refreshPosts(posts: Array<Post>): IAction {\n    return {\n        type: ACTIONS.REFRESH_POSTS,\n        posts: posts\n    }\n}\n\nexport function deletePost(post: Post): IAction {\n    let posts: Array<Post> = (store.getState() as IStore).posts!;\n    const postToDeleteIndex: number = posts.indexOf(post);\n    posts.splice(postToDeleteIndex, 1);\n\n    return {\n        type: ACTIONS.DELETE_POST,\n        posts: posts\n    }\n}\n\nexport function updatePost(post: Post): IAction {\n    let posts: Array<Post> = (store.getState() as IStore).posts!;\n    const postToDeleteIndex: number = posts.indexOf(post);\n    posts[postToDeleteIndex] = post;\n\n    return {\n        type: ACTIONS.UPDATE_POST,\n        posts: posts\n    }\n}","import { createStore } from 'redux';\nimport { ACTIONS } from './actions';\n\nimport User from '../Model/User';\nimport Post from '../Model/Post';\n\nexport interface IStore {\n    userAuthenticated?: User,\n    posts?: Array<Post>\n}\n\nexport interface IAction extends IStore{\n    type: string | number;\n}\n\nconst INITIAL_STATE: IStore = {\n    userAuthenticated: undefined,\n    posts: new Array<Post>()\n}\n\nfunction reducer(state: any = INITIAL_STATE, action: IAction){\n    switch(action.type){\n        case (ACTIONS.LOGIN):{\n            return {\n                ...state,\n                userAuthenticated: action.userAuthenticated\n            }\n        }\n        \n        case (ACTIONS.LOGOFF):{\n            return{\n                ...state,\n                userAuthenticated: undefined\n            }\n        }\n\n        case ACTIONS.CREATE_POST : case ACTIONS.REFRESH_POSTS: case ACTIONS.DELETE_POST: case ACTIONS.UPDATE_POST: {\n            return {\n                ...state,\n                posts: action.posts\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nexport default store;","// React Imports\nimport React from 'react';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\n\n// Components\n\n// Model\n\n// Services\n\n// Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\n// Enums\nexport enum VARIANT {\n    WARNING = 'warning',\n    SUCCESS = 'success',\n    ERROR = 'error',\n    INFO = 'info'\n}\n\ninterface IProps {\n    text: string;\n    handleClose?: () => void;\n    variant: VARIANT;\n    show: boolean;\n}\n\nexport default function CustomSnackBar(props: IProps){\n    const { text, handleClose, variant, show } = props;\n\n    let icon;\n    switch(variant){\n        case VARIANT.WARNING:\n            icon = <WarningIcon/>;  break;\n        case VARIANT.SUCCESS:\n            icon = <CheckCircleIcon/>;  break;\n        case VARIANT.ERROR:\n            icon = <ErrorIcon/>;  break;\n        case VARIANT.INFO:\n            icon = <InfoIcon/>;  break;\n    }\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n            }}\n            open={show}\n            autoHideDuration={8000}\n            onClose={handleClose}\n            ContentProps={{\n                'aria-describedby': 'message-id',\n            }}\n            message={   <span id=\"message-id\" className='message'>\n                            {icon}\n                            {text}\n                        </span>}\n            action={[\n                /*<Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={handleClose}>\n                    UNDO\n                </Button>,*/\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    className='close'\n                    onClick={handleClose}>\n                <CloseIcon />\n                </IconButton>,\n            ]}\n            className={'SnackBar ' + variant} \n            />\n    );\n}","export class Utilities{\n    \n    static validateEmail(email: string): boolean {\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n    }\n\n    static formatDate(date: Date, displayHour: boolean = false): string{\n        const year = date.getFullYear();\n        const month = Utilities.completeLeadingZeros((date.getMonth() + 1).toString(), 2); //Mês começa com 0 = Janeiro\n        const day = Utilities.completeLeadingZeros(date.getDate().toString(), 2);\n        let displayedHour = '';\n        \n        if (displayHour)\n            displayedHour = ' ' + this.formatHour(date);\n\n        return day + '/' + month + '/' + year + displayedHour;\n    }\n    \n    static formatHour(date: Date, displaySeconds: boolean = false): string{\n        const hour = Utilities.completeLeadingZeros(date.getHours().toString(), 2);\n        const minutes = Utilities.completeLeadingZeros(date.getMinutes().toString(), 2);\n        const seconds = displaySeconds ? ':' + Utilities.completeLeadingZeros(date.getSeconds().toString(), 2) : '';\n        return hour + ':' + minutes + seconds;\n    }\n\n    private static getMidnightTime(date: Date): Date {\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n\n        return date;\n    }\n\n    static translateDateToText(date: Date): string {\n        let originalDate: Date = date;\n        if (this.getMidnightTime(date).valueOf() === this.getMidnightTime(new Date()).valueOf() )\n            return 'Today at ' + this.formatHour(originalDate); // Today\n        else\n            return '';\n    }\n\n    static completeLeadingZeros(value: string, numZero: number): string {\n        let zeros = '';\n        for (let iCount = 0; iCount < numZero; iCount++)    zeros = '0' + zeros;\n        return (zeros + value).slice(-numZero);\n    }\n}","export default class ConfidentialInfo {\n    public static firebaseConfig = {\n        apiKey: \"AIzaSyDS1v5erkI8ArkEpO_NoEDRv4wcDDLIu5I\",\n        authDomain: \"socialnetwork-d9478.firebaseapp.com\",\n        databaseURL: \"https://socialnetwork-d9478.firebaseio.com\",\n        projectId: \"socialnetwork-d9478\",\n        storageBucket: \"socialnetwork-d9478.appspot.com\",\n        messagingSenderId: \"1077042299179\",\n        appId: \"1:1077042299179:web:4048574ca3f2bcffa4456e\"\n    };\n}","import firebase from 'firebase';\nimport ConfidentialInfo from './ConfidentialInfo';\n\nexport function initializeFirebase(){\n    for (let iCount = 0; iCount < firebase.apps.length; iCount++){\n        if (firebase.apps[iCount].name === '[DEFAULT]')\n            return;\n    }\n    firebase.initializeApp(ConfidentialInfo.firebaseConfig);\n}\n\nexport const firebaseApp = firebase;","export enum Gender{\n    MALE,\n    FEMALE,\n    NOT_INFORM\n}\n\nexport default class User{\n    id: string = '';\n    email: string;\n    firstName: string;\n    lastName: string;\n    gender: Gender;\n    friends: Array<User>; // Not persisted on database\n    hasImage: boolean;\n    \n\n    _friends: Array<string>; // Users ID - Persisted on database\n\n    constructor(email: string, firstName: string, gender: Gender, lastName: string = ''){\n        this.email = email;\n        this.firstName = firstName;\n        this.gender = gender;\n        \n        this.lastName = lastName;\n        \n        this.friends = new Array<User>();\n        this._friends = new Array<string>();\n        this.hasImage = false;\n    }\n\n    getFirstLetter(): string{\n        return this.firstName[0];\n    }\n\n    getFullName(): string{\n        return this.firstName + ' ' + this.lastName;\n    }\n\n    getUpdatable(){\n        return {\n            'id': this.id,\n            'email': this.email,\n            'firstName': this.firstName,\n            'lastName': this.lastName,\n            'gender': this.gender,\n            'friends': this._friends,\n            'hasImage': this.hasImage\n        }\n    }\n\n    static getUser(_user: any, loadFriends: boolean = false): User {\n        let id: string = _user.id;\n        let email: string = _user.email;\n        let firstName: string = _user.firstName;\n        let lastName: string = _user.lastName;\n        let gender: Gender = _user.gender;\n        let _friends: Array<string> = _user.friends ? Object.keys(_user.requests).map(iCount => _user.friends[iCount]) : new Array<string>();\n        let friends: Array<User> = new Array<User>();\n        let hasImage: boolean = _user.hasImage;\n        if (loadFriends)\n            friends = new Array<User>();\n\n        let user: User = new User(email, firstName, gender, lastName);\n        user.id = id;\n        user._friends = _friends;\n        user.friends = friends;\n        user.hasImage = hasImage;\n\n        return user;\n    }\n}","import {firebaseApp} from './Firebase';\nimport {initializeFirebase} from './Firebase';\n\nexport class FirebaseAuth {\n\n    static createUser(email: string, password: string): Promise<firebase.auth.UserCredential> {\n        initializeFirebase();\n    \n        return new Promise((resolve, reject) => {\n            firebaseApp.auth().createUserWithEmailAndPassword(email, password).then((info) => {\n                resolve(info);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    \n    static loginUser(email: string, password: string): Promise<firebase.auth.UserCredential> {\n        initializeFirebase();\n    \n        return new Promise((resolve, reject) => {\n            firebaseApp.auth().signInWithEmailAndPassword(email, password).then((info) => {\n                resolve(info);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    \n    static async resetPassword(email: string): Promise<void> {\n        initializeFirebase();\n\n        await firebaseApp.auth().sendPasswordResetEmail(email);\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport '../../Pages/Login/styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport User from '../../Model/User';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport {FirebaseAuth} from '../../Services/Firebase/FirebaseAuth';\nimport {UserDB} from '../../Services/Firebase/Database/UserDB';\n\n// Icons\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\n// Enums\nenum FIELD {\n    EMAIL,\n    FIRSTNAME,\n    LASTNAME,\n    PASSWORD,\n    SEX,\n    BIRHTDAY\n}\n\n// Interfaces\ninterface IProps {\n    dispatch: any,\n    userAuthenticated?: User\n}\n\ninterface IState {\n    submitted: boolean,\n    email: string,\n    password: string,\n    showSnackBar: boolean,\n    snackBarText: string,\n    keepConnected: boolean\n}\n\nclass LoginComponent extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n    \n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            email: '',\n            password: '',\n            showSnackBar: false,\n            snackBarText: '',\n            keepConnected: true\n        };\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n    \n    componentWillMount = () => {\n        const userID = localStorage.getItem('@SocialNetwork/uid');\n        if (userID)\n            this.loginUser(userID);\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {email, password} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (!Utilities.validateEmail(email))\n            message =  'Email address is not valid';\n        this.errorMessages.set(FIELD.EMAIL, message);\n\n        // Password\n        message = '';\n        if (password.length === 0)\n            message =  'Password is required';\n        this.errorMessages.set(FIELD.PASSWORD, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n    \n    handleLogin = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {email, password, keepConnected} = this.state;\n            FirebaseAuth.loginUser(email, password).then((info) => {\n                if (keepConnected)\n                    localStorage.setItem('@SocialNetwork/uid', info.user!.uid);\n                else\n                    localStorage.removeItem('@SocialNetwork/uid');\n\n                this.loginUser(info.user!.uid);\n            }).catch(async (error) => {\n                await this.setState({snackBarText: error.message})\n                this.setState({showSnackBar: true});\n            });\n        }\n    }\n\n    loginUser = (userUID: string) => {\n        UserDB.getUser(userUID).then((user) => {\n            this.props.dispatch(Actions.login(user));\n        });\n    }\n    \n    handleClose = () => this.setState({showSnackBar: false});\n\n    render(){   \n        const {email, password, showSnackBar, snackBarText, keepConnected} = this.state;\n        \n        this.setHelpersText();\n        return(\n            <div className=\"componentContainer componentLoginContainer\">\n                <div className=\"componentWelcome\">\n                    Good to see you again. Welcome!\n                </div>\n\n                <CustomSnackBar\n                    variant = {VARIANT.ERROR}\n                    handleClose={this.handleClose}\n                    show={showSnackBar}\n                    text={snackBarText}/>\n\n                <form className=\"componentForm componentLoginForm\">\n                    <TextField\n                        required\n                        error = {this.displayError(FIELD.EMAIL)}\n                        value={email}\n                        onChange = {newValue => this.setState({email: newValue.target.value}) }\n                        id=\"email\"\n                        label=\"E-mail\"\n                        helperText = {this.displayHelperText(FIELD.EMAIL)}\n                        variant=\"outlined\"/>\n\n                    <TextField \n                        required\n                        error = {this.displayError(FIELD.PASSWORD)}\n                        value={password}\n                        onChange = {newValue => this.setState({password: newValue.target.value})}\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        helperText = {this.displayHelperText(FIELD.PASSWORD)}\n                        variant=\"outlined\"/>\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={keepConnected}\n                                onChange={newValue => this.setState({keepConnected: newValue.target.checked }) }\n                                value={keepConnected}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Keep connected\"/>\n\n                </form>\n\n                <div className=\"formSubmit\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className='submitButton'\n                        onClick = {this.handleLogin}>\n                        Login\n                    </Button>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({\n    userAuthenticated: state.userAuthenticated}) ) (LoginComponent)","import {firebaseApp, initializeFirebase} from '../Firebase';\n\nimport User from '../../../Model/User';\n\nexport class UserDB {\n    static async createUser(user: User): Promise<void> {\n        initializeFirebase();\n\n        await firebaseApp.database().ref('users/' + user.id).update(user.getUpdatable());\n    }\n\n    static getUser(userID: string): Promise<User> {\n        initializeFirebase();\n\n        return new Promise((resolve, reject) => {\n            firebaseApp.database().ref('users/' + userID).once('value', (dataSnapshot) => {\n                const user: User = User.getUser(dataSnapshot.exportVal());\n                resolve(user);\n            });\n        })\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport '../../Pages/Login/styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport User, {Gender} from '../../Model/User';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport {FirebaseAuth} from '../../Services/Firebase/FirebaseAuth';\nimport {UserDB} from '../../Services/Firebase/Database/UserDB';\nimport {CloudStorage} from '../../Services/Firebase/CloudStorage';\n\n// Icons\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport BlockIcon from '@material-ui/icons/Block';\n\n// Enums\nenum FIELD {\n    EMAIL,\n    FIRSTNAME,\n    LASTNAME,\n    PASSWORD,\n    SEX\n}\n\n// Interfaces\ninterface IProps {\n    dispatch: any,\n    userAuthenticated?: User\n}\n\ninterface IState {\n    submitted: boolean,\n    email: string,\n    firstName: string,\n    lastName: string,\n    password: string,\n    sex: Gender,\n    showSnackBar: boolean,\n    snackBarText: string,\n    pictureFile?: File,\n    picturePreviewURL: string\n}\n\nclass RegisterComponent extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n\n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            email: '',\n            firstName: '',\n            lastName: '',\n            password: '',\n            sex: Gender.NOT_INFORM,\n            showSnackBar: false,\n            snackBarText: '',\n            pictureFile: undefined,\n            picturePreviewURL: ''\n        }\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {email, password, firstName} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (!Utilities.validateEmail(email))\n            message =  'Email address is not valid';\n        this.errorMessages.set(FIELD.EMAIL, message);\n\n        // FirstName\n        message = '';\n        if (firstName.length === 0)\n            message =  'First Name Required';;\n        this.errorMessages.set(FIELD.FIRSTNAME, message);\n        \n        // Password\n        message = '';\n        if (password.length === 0)\n            message =  'Password is required';\n        this.errorMessages.set(FIELD.PASSWORD, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n    \n    handleRegister = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {email, password, firstName, lastName, sex, pictureFile} = this.state;\n            let user: User = new User(email, firstName, sex, lastName);\n\n            FirebaseAuth.createUser(email, password).then(async (info) => {\n                user.id = info.user!.uid;\n                if (pictureFile){\n                    CloudStorage.uploadUserImage(user.id, pictureFile!);\n                    user.hasImage = true;\n                }\n\n                await UserDB.createUser(user);\n                this.props.dispatch(Actions.login(user));\n            }).catch( async (error) => {\n                await this.setState({snackBarText: error.message})\n                this.setState({showSnackBar: true});\n            });\n        }\n    }\n\n    handleClose = () => this.setState({showSnackBar: false});\n\n    handleImageSelected = (file: File) => {\n        if (file){\n            let fileReader: FileReader = new FileReader();\n            fileReader.onloadend = () => {\n                this.setState({\n                    pictureFile: file,\n                    picturePreviewURL: fileReader.result! as string\n                });\n            }\n\n            fileReader.readAsDataURL(file);\n        }\n    }\n\n    handleRemoveProfilePicture = () => {\n        this.setState({\n            pictureFile: undefined,\n            picturePreviewURL: ''\n        });\n    }\n\n    render(){\n        const {email, password, firstName, lastName, sex, showSnackBar, snackBarText, picturePreviewURL} = this.state;\n\n        this.setHelpersText();\n        return(\n            <div className=\"componentContainer\">\n                <div className=\"componentWelcome\">\n                    Welcome to mine, yours, our Social Network!\n                </div>\n    \n                <CustomSnackBar\n                    variant = {VARIANT.ERROR}\n                    handleClose={this.handleClose}\n                    show={showSnackBar}\n                    text={snackBarText}/>\n\n                <form className='componentForm'>\n                        <TextField\n                            required\n                            error = {this.displayError(FIELD.EMAIL)}\n                            value={email}\n                            onChange = {newValue => this.setState({email: newValue.target.value}) }\n                            id=\"email\"\n                            label=\"E-mail\"\n                            helperText = {this.displayHelperText(FIELD.EMAIL)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            required\n                            error = {this.displayError(FIELD.PASSWORD)}\n                            value={password}\n                            onChange = {newValue => this.setState({password: newValue.target.value}) }\n                            id=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            helperText = {this.displayHelperText(FIELD.PASSWORD)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            required\n                            error = {this.displayError(FIELD.FIRSTNAME)}\n                            value={firstName}\n                            onChange = {newValue => this.setState({firstName: newValue.target.value}) }\n                            id=\"firstName\"\n                            label=\"First name\"\n                            helperText = {this.displayHelperText(FIELD.FIRSTNAME)}\n                            variant=\"outlined\"/>\n    \n                        <TextField \n                            id=\"lastName\"\n                            value={lastName}\n                            onChange = {newValue => this.setState({lastName: newValue.target.value}) }\n                            error = {this.displayError(FIELD.LASTNAME)}\n                            label=\"Last name\"\n                            helperText = {this.displayHelperText(FIELD.LASTNAME)}\n                            variant=\"outlined\"/>\n    \n                        <FormControl\n                            variant=\"outlined\"\n                            error={this.displayError(FIELD.SEX)}>\n                            <InputLabel id=\"demo-simple-select-error-label\">Gender</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-error-label\"\n                                id=\"demo-simple-select-error\"\n                                value={sex}\n                                onChange={newValue => this.setState({sex: newValue.target.value as Gender})}\n                                >\n                                <MenuItem value={Gender.MALE}>Male</MenuItem>\n                                <MenuItem value={Gender.FEMALE}>Female</MenuItem>\n                                <MenuItem value={Gender.NOT_INFORM}>Not informed</MenuItem>\n                            </Select>\n                            <FormHelperText>{this.displayHelperText(FIELD.SEX)}</FormHelperText>\n                        </FormControl>\n\n                        <div className=\"profilePicture\">\n\n                            <div className=\"profileIcons\">\n\n                                <input\n                                    accept=\"image/*\" \n                                    className='inputUploadPicture'\n                                    type=\"file\"\n                                    id='profileImage'\n                                    onChange = {newValue => this.handleImageSelected(newValue.target.files![0])} />\n                                <label htmlFor=\"profileImage\">\n                                    <IconButton\n                                        color=\"primary\"\n                                        aria-label=\"upload picture\"\n                                        component=\"span\">\n                                        <PhotoCamera />\n                                    </IconButton>\n                                </label>\n\n                                {picturePreviewURL && \n                                    <IconButton\n                                        color=\"primary\"\n                                        aria-label=\"upload picture\"\n                                        onClick = {() => this.handleRemoveProfilePicture()}\n                                        component=\"span\">\n                                        <BlockIcon />\n                                    </IconButton>\n                                }\n\n                            </div>\n\n                            {picturePreviewURL && \n                                <img className = 'profilePicture' src={picturePreviewURL} />\n                            }\n                        </div>\n    \n                </form>\n    \n                <div className = 'formSubmit'>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className='submitButton'\n                        onClick = {this.handleRegister}>\n                        Register\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default connect((state: IStore) => ({\n    userAuthenticated: state.userAuthenticated}) ) (RegisterComponent)","import {firebaseApp} from './Firebase';\nimport {initializeFirebase} from './Firebase';\nimport { resolve } from 'dns';\n\nexport class CloudStorage {\n\n    private static uploadImage(id: string, imageFile: File): Promise<void> {\n        initializeFirebase();\n\n        const postImageReference = firebaseApp.storage().ref().child(id);\n        return new Promise<void>((resolve) => {\n            postImageReference.put(imageFile).then(() => {\n                resolve()\n            });\n        });\n    }\n\n    static uploadUserImage(userID: string, imageFile: File): Promise<void> {\n        return this.uploadImage('users/' + userID, imageFile);\n    }\n\n    static uploadPostImage(postID: string, imageFile: File): Promise<void> {\n        return this.uploadImage('posts/' + postID, imageFile);\n    }\n\n    private static downloadImage(id: string): Promise<string> {\n        initializeFirebase();\n\n        const imageReference = firebaseApp.storage().ref().child(id);\n        return new Promise<string>((resolve) => {\n            imageReference.getDownloadURL().then((URL) => {\n                resolve(URL);\n            });\n        })\n    }\n\n    static downloadUserImage(userID: string): Promise<string> {\n        return this.downloadImage('users/' + userID);\n    }\n\n    static downloadPostImage(postID: string): Promise<string> {\n        return this.downloadImage('posts/' + postID);\n    }\n\n    private static deleteImage(id: string): Promise<void> {\n        initializeFirebase();\n\n        const imageReference = firebaseApp.storage().ref().child(id);\n        return new Promise<void>((resolve) => {\n            imageReference.delete().then(() => {\n                resolve();\n            });\n        });\n    }\n\n    static deletePostImage(postID: string): Promise<void> {\n        return this.deleteImage('posts/' + postID);\n    }\n}","// React Imports\nimport React, { Component } from 'react';\n\n// Router\nimport {PossibleRoutes} from '../../Routes';\n\n// Redux\nimport { connect } from 'react-redux';\nimport * as Actions from '../../Store/actions';\nimport store, { IStore } from '../../Store/index';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n// Components\nimport LoginComponent from '../../Components/LoginComponent';\nimport RegisterComponent from '../../Components/RegisterComponent';\n\n// Model\nimport User from '../../Model/User';\n\n// Services\n\n// Icons\n\n// Enums\nenum TABS {\n    Login,\n    Register\n}\n\n// Interfaces\ninterface IProps {\n    userAuthenticated?: User,\n    dispatch: any,\n    history: any\n}\n\ninterface IState {\n    selectedTab: TABS\n}\n\nclass Login extends Component<IProps, IState>{\n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            selectedTab: TABS.Login\n        };\n\n        store.subscribe(this.authenticationCanBeChanged);\n    }\n\n    authenticationCanBeChanged = () => {\n        if ((store.getState() as IStore).userAuthenticated !== undefined)\n            this.props.history.push(PossibleRoutes.HOME);\n    }\n\n    setSelectedTab(newValue: TABS){\n        this.setState({selectedTab: newValue});\n    }\n    \n    renderActiveTab(){\n        switch (this.state.selectedTab) {\n            case TABS.Login:\n                return <LoginComponent/>\n            case TABS.Register:\n                return <RegisterComponent/>\n            default:\n                return <h1>Falha no sistema</h1>\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"login-container\">\n                {this.renderActiveTab()}\n\n                <Paper square className='bottomTabs'>\n                    <Tabs\n                    value={this.state.selectedTab}\n                    onChange={(event, value) => this.setSelectedTab(value) }\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    centered\n                    aria-label=\"icon label tabs example\">\n                        <Tab value = {TABS.Login}    label=\"Login\" />\n                        <Tab value = {TABS.Register} label=\"Create account\" />\n                    </Tabs>\n                </Paper>\n\n        </div>\n        );\n    }\n}\n\nexport default Login;","import User from './User';\nimport PostEdited from './PostEdited';\nimport { UserDB } from '../Services/Firebase/Database/UserDB';\n\nexport enum PostVisibility{\n    PUBLIC,\n    PRIVATE\n}\n\nexport default class Post {\n    id: string = '';\n    user: User; // Not persisted on database\n    private _date: Date;\n    private _inverseDate: number; // Datetime of post inverted to sort the post descending on Firebase\n    content: string;\n    history: Array<PostEdited>;\n    visibility: PostVisibility;\n    hasPicture: boolean;\n\n    userStr: string; // UserID - Persisted on database\n\n    constructor(user: User, date: Date, content: string, visibility: PostVisibility = PostVisibility.PUBLIC, hasPicture: boolean = false){\n        this.user = user;\n        this.userStr = user.id;\n        this._date = date;\n        this._inverseDate = - date.getTime();\n        this.content = content;\n        this.visibility = visibility;\n        this.hasPicture = hasPicture;\n\n        this.history = new Array<PostEdited>();\n    }\n\n    setDate(date: Date){\n        this._date = date;\n        this._inverseDate = - date.getTime();\n    }\n\n    getDate(): Date{\n        return this._date;\n    }\n\n    getUpdatable() {\n        return {\n            'id': this.id,\n            'user': this.userStr,\n            'date': this._date.getTime(),\n            'inverseDate': this._inverseDate,\n            'content': this.content,\n            'visibility': this.visibility,\n            'history': this.history,\n            'hasPicture': this.hasPicture\n        }\n    }\n\n    static async getPost(_post: any, loadUser: boolean = false, loadHistory: boolean = false): Promise<Post> {\n        let id: string = _post.id;\n        let _user: string = _post.user;\n        let date: Date = new Date(_post.date);\n        let content: string = _post.content;\n        let visibility: PostVisibility = _post.visibility;\n        let history: Array<PostEdited> = _post.history ? Object.keys(_post.history).map(iCount => _post.history[iCount]) : new Array<PostEdited>();\n        let hasPicture: boolean = _post.hasPicture;\n\n        return new Promise(async (resolve, reject) => {\n            let user = await UserDB.getUser(_user);\n            \n            let post: Post = new Post(user, date, content, visibility, hasPicture);\n            post.id = id;\n            post.userStr = _user;\n            post.history = history;\n\n            resolve(post);\n        });\n    }\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport store, { IStore } from '../../Store/index';\nimport * as Actions from '../../Store/actions';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\n\n// Components\nimport CustomSnackBar, {VARIANT} from '../CustomSnackBar';\n\n// Model\nimport Post, {PostVisibility} from '../../Model/Post';\nimport User from '../../Model/User';\n\n// Services\nimport {PostDB} from '../../Services/Firebase/Database/PostDB';\nimport {CloudStorage} from '../../Services/Firebase/CloudStorage';\n\n// Icons\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport BlockIcon from '@material-ui/icons/Block';\n\ninterface IProps {\n    dispatch: any\n}\n\ninterface IState {\n    submitted: boolean,\n    visibility: PostVisibility,\n    postContent: string,\n    showSnackBar: boolean,\n    textFieldFocused: boolean,\n    pictureFile?: File,\n    picturePreviewURL: string\n}\n\nenum FIELD {\n    POST_CONTENT\n}\n\nclass CreatePost extends Component<IProps, IState>{\n    errorMessages: Map<number, string> = new Map<number, string>();\n    \n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            submitted: false,\n            visibility: PostVisibility.PRIVATE,\n            postContent: '',\n            showSnackBar: false,\n            textFieldFocused: false,\n            pictureFile: undefined,\n            picturePreviewURL: ''\n        }\n\n        // Initializing map\n        for (let field in FIELD)\n            this.errorMessages.set(parseInt(field), '');\n    }\n\n    // Functions and consts\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    setHelpersText = (): void => {\n        const {postContent} = this.state;\n\n        let message: string = '';\n\n        // Email\n        message = '';\n        if (postContent.length === 0)\n            message =  'Post content required';\n        this.errorMessages.set(FIELD.POST_CONTENT, message);\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        if (this.state.submitted)\n            return this.errorMessages.get(field) as string;\n        else\n            return '';\n    }\n\n    handlePost = async () => {\n        this.setState({submitted: true});\n\n        let error: boolean = false;\n        this.errorMessages.forEach((value: string, key: number) => {\n            if (!error)\n                error = value.length > 0;\n        });\n\n        if (!error){\n            const {postContent, visibility, pictureFile} = this.state;\n            const user: User = (store.getState() as IStore).userAuthenticated!;\n            \n            const hasPicture: boolean = pictureFile !== undefined;\n\n            const post: Post = new Post(user, new Date(), postContent, visibility, hasPicture);\n            PostDB.createPost(post).then((idPost) => {\n                if (hasPicture)\n                    CloudStorage.uploadPostImage(idPost, pictureFile!);\n\n                this.props.dispatch(Actions.createPost(post));\n                this.setState({\n                    submitted: false,\n                    showSnackBar: true,\n                    postContent: '',\n                    pictureFile: undefined,\n                    picturePreviewURL: ''\n                });\n            });\n        }\n    }\n\n    setPostContent = (newValue: string) => this.setState({postContent: newValue});\n    setVisibility = (newValue: PostVisibility) => this.setState({visibility: newValue});\n    handleCloseSnackBar = () => this.setState({showSnackBar: false})\n    \n    handleImageSelected = (file: File) => {\n        if (file){\n            let fileReader: FileReader = new FileReader();\n            fileReader.onloadend = () => {\n                this.setState({\n                    pictureFile: file,\n                    picturePreviewURL: fileReader.result! as string\n                });\n            }\n\n            fileReader.readAsDataURL(file);\n        }\n    }\n\n    handleCancelPicture = () => {\n        this.setState({pictureFile: undefined, picturePreviewURL: ''});\n    }\n\n    render(){\n        const {visibility, postContent, showSnackBar, textFieldFocused, picturePreviewURL} = this.state;\n\n        this.setHelpersText();\n        return(\n            <div className=\"createPostContainer\">\n    \n                <CustomSnackBar\n                    variant = {VARIANT.SUCCESS}\n                    handleClose={this.handleCloseSnackBar}\n                    show={showSnackBar}\n                    text='Post created'/>\n\n                <div className=\"contentArea\">\n                    <TextField\n                        id=\"outlined-multiline-static\"\n                        label=\"What's going on?\"\n                        multiline\n                        rows={textFieldFocused || postContent.length > 0 ? \"4\" : \"1\"}\n                        onFocus = {() => this.setState({textFieldFocused: true})}\n                        onBlur = {() => this.setState({textFieldFocused: false})}\n                        value={postContent}\n                        onChange = {newValue => this.setPostContent(newValue.target.value)}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        error = {this.displayError(FIELD.POST_CONTENT)}\n                        helperText = {this.displayHelperText(FIELD.POST_CONTENT)}\n                        />\n                </div>\n    \n                <div className=\"bottomButtons\">\n\n                    <div className=\"postUploadPicture\">\n\n                        <div className=\"postUploadButtons\">\n                            <input\n                                accept=\"image/*\" \n                                className='inputUploadPicture'\n                                type=\"file\"\n                                id='createPost-inputImage'\n                                onChange = {newValue => this.handleImageSelected(newValue.target.files![0])} />\n                            <label htmlFor=\"createPost-inputImage\">\n                                <IconButton\n                                    color=\"primary\"\n                                    aria-label=\"upload picture\"\n                                    component=\"span\">\n                                    <PhotoCamera />\n                                </IconButton>\n                            </label>\n\n                            {picturePreviewURL && \n                                <IconButton \n                                    aria-label=\"cancel upload picture\"\n                                    onClick={this.handleCancelPicture}\n                                    component=\"span\">\n                                    <BlockIcon />\n                                </IconButton>\n                            }\n\n                        </div>\n\n                        {picturePreviewURL && \n                            <img className = 'postPicture' src={picturePreviewURL} />\n                        }\n\n                    </div>\n\n                    <div className=\"postButtonOptions\">\n                        <FormControl \n                            variant=\"outlined\"\n                            className = 'formChooseVisibility'>\n                            <Select\n                                labelId=\"demo-simple-select-error-label\"\n                                id=\"demo-simple-select-error\"\n                                value={visibility}\n                                onChange={newValue => this.setVisibility(newValue.target.value as PostVisibility)}\n                                >\n                                <MenuItem value={PostVisibility.PRIVATE}>Only friends</MenuItem>\n                                <MenuItem value={PostVisibility.PUBLIC}>Public</MenuItem>\n                            </Select>\n                        </FormControl>\n        \n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {this.handlePost}\n                            className = 'formSubmit'>\n                            Post\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({}) ) (CreatePost)","import {firebaseApp, initializeFirebase} from '../Firebase';\n\nimport Post, { PostVisibility } from '../../../Model/Post';\n\nexport class PostDB {\n    static async createPost(post: Post): Promise<string> {\n        initializeFirebase();\n\n        const reference = await firebaseApp.database().ref('posts').push();\n        post.id = reference.key!;\n        await firebaseApp.database().ref('posts/' + reference.key).update(post.getUpdatable());\n        return new Promise((resolve, reject) => resolve(reference.key!));\n    }\n\n    private static getBaseQuery(): firebase.database.Query {\n        return firebaseApp.database().ref('posts/').orderByChild('inverseDate');\n    }\n\n    /*static getPosts(queryPost: QueryPosts, userID: string): Promise<Array<Post>>{\n        initializeFirebase();\n\n        return new Promise<Array<Post>>((resolve, reject) => {\n            let firebaseQuery: firebase.database.Query;\n            \n            switch(queryPost){\n                case QueryPosts.AllPosts:{\n                    firebaseQuery = this.getBaseQuery();\n                    break;\n                }\n\n                case QueryPosts.Public: {\n                    firebaseQuery = this.getBaseQuery().orderByChild('visibility').equalTo(PostVisibility.PUBLIC);\n                    break;\n                }\n\n                case QueryPosts.Private: {\n                    firebaseQuery = this.getBaseQuery().orderByChild('visibility').equalTo(PostVisibility.PRIVATE);\n                    break;\n                }\n\n                case QueryPosts.My: {\n                    firebaseQuery = this.getBaseQuery().orderByChild('id').equalTo(userID);\n                    break;\n                }\n            }\n        });\n    }*/\n\n    static getAvailablePosts(userID: string): Promise<Array<Post>> {\n        initializeFirebase();\n\n        return new Promise<Array<Post>>((resolve, reject) => {\n            this.getBaseQuery().once('value', \n                (dataSnapshot) => {\n                    this.getPostsFromDataSnapshot(dataSnapshot, userID).then((values) => {\n                        resolve(values);\n                    });\n            });\n        });\n    }\n\n    static getPostsFromDataSnapshot(dataSnapshot: firebase.database.DataSnapshot, userID: string): Promise<Array<Post>>{\n        return new Promise<Array<Post>>((resolve, reject) => {\n            let promisesPosts: Array<Promise<Post>> = new Array<Promise<Post>>();\n\n            dataSnapshot.forEach((childSnapshot) => {\n                const publicPost: boolean = childSnapshot.exportVal().visibility === PostVisibility.PUBLIC;\n                const ownPost: boolean = childSnapshot.exportVal().user === userID;\n                if (publicPost || ownPost ){\n                    promisesPosts.push(new Promise<Post>((resolve, reject) => {\n                        Post.getPost(childSnapshot.exportVal()).then((post) =>{\n                            resolve(post);\n                        });\n                    }));\n                }\n            });\n            \n            Promise.all(promisesPosts).then((values) => {\n                resolve(values);\n            });\n        });\n    }\n\n    static deletePost(postID: string) : Promise<void> {\n        initializeFirebase();\n\n        return new Promise<void>((resolve) => {\n            firebaseApp.database().ref('posts/' + postID).remove().then(() => {\n                resolve();\n            });\n        });\n    }\n\n    static updatePost(post: Post) : Promise<void> {\n        initializeFirebase();\n\n        return new Promise<void>(async (resolve) => {\n            await firebaseApp.database().ref('posts/' + post.id).update(post.getUpdatable())\n            resolve();\n        });\n    }\n\n}","// React Imports\nimport React, {Component} from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport store, { IStore } from '../../Store/index';\nimport * as Actions from '../../Store/actions';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// Components\n\n// Model\nimport Post from '../../Model/Post';\nimport User from '../../Model/User';\nimport PostEdited from '../../Model/PostEdited';\n\n// Services\nimport {Utilities} from '../../Services/Utilities';\nimport { PostDB } from '../../Services/Firebase/Database/PostDB';\nimport { CloudStorage } from '../../Services/Firebase/CloudStorage';\n\n// Icons\nimport SaveIcon from '@material-ui/icons/Save';\nimport BlockIcon from '@material-ui/icons/Block';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\n\ninterface Props {\n    key: string,\n    post: Post,\n    userAuthenticated?: User,\n    dispatch: any\n}\n\ninterface State {\n    displayDeleteDialog: boolean,\n    editingPost: boolean,\n    editingText: string,\n    picturePreviewURL: string,\n    hasPicture: boolean,\n    userAvatar: any\n}\n\nenum FIELD {\n    POST_CONTENT\n}\n\nclass PostComponent extends Component<Props, State>{\n    constructor(props: Props){\n        super(props);\n\n        this.state = {\n            displayDeleteDialog: false,\n            editingPost: false,\n            editingText: '',\n            picturePreviewURL: '',\n            hasPicture: this.props.post.hasPicture,\n            userAvatar: undefined\n        }\n    }\n    \n    componentDidMount = async() => {\n        const avatar = await this.userAvatar();\n        this.setState({userAvatar: avatar});\n    }\n\n    componentWillMount = () => {\n        const {post} = this.props;\n\n        if (post.hasPicture){\n            CloudStorage.downloadPostImage(post.id).then((pictureURL) => {\n                this.setState({picturePreviewURL: pictureURL});\n            });\n        }\n    }\n\n    handleEdit = () => {\n        this.setState({editingPost: true, editingText: this.props.post.content});\n    }\n\n    handleOpenDeleteDialog = () => {\n        if (!this.state.editingPost)\n            this.setState({displayDeleteDialog: true});\n    }\n\n    handleCloseDeleteDialog = () => {\n        if (!this.state.editingPost)\n            this.setState({displayDeleteDialog: false});\n    }\n\n    handleSaveEdit = async () => {\n        const {editingText, hasPicture} = this.state;\n        \n        if (editingText.length > 0){\n            this.handleCancelEdit();\n\n            let {post} = this.props;\n            post.history.push(new PostEdited(post.getDate(), post.content));\n            post.content = editingText;\n            post.setDate(new Date());\n            post.hasPicture = hasPicture;\n            if (!hasPicture)\n                CloudStorage.deletePostImage(post.id);\n\n            await PostDB.updatePost(post);\n            this.props.dispatch(Actions.updatePost(post));\n        }\n    }\n\n    handleCancelEdit = () => {\n        if (this.state.editingPost)\n            this.setState({editingPost: false});\n    }\n\n    confirmDelete = () => {\n        this.handleCloseDeleteDialog();\n\n        const {post} = this.props;\n\n        PostDB.deletePost(post.id).then(() => {\n            CloudStorage.deletePostImage(post.id);\n            this.props.dispatch(Actions.deletePost(post));\n        });\n    }\n\n    displayError = (field: FIELD): boolean => {\n        return this.displayHelperText(field).length > 0;\n    }\n\n    displayHelperText = (field: FIELD): string => {\n        const {editingPost, editingText} = this.state;\n\n        if (editingPost && editingText.length === 0)\n            return 'Post content required';\n        else\n            return '';\n    }\n\n    handleDeletePicture = () => {\n        const {id} = this.props.post;\n        this.setState({picturePreviewURL: '', hasPicture: false}, () => {\n            CloudStorage.deletePostImage(id);\n            this.handleSaveEdit();\n        });\n    }\n\n    handleChangePicture = (file: File, newPicture: boolean = false) => {\n        if (file){\n            let fileReader: FileReader = new FileReader();\n            fileReader.onloadend = () => {\n                this.setState({\n                    picturePreviewURL: fileReader.result! as string,\n                    hasPicture: newPicture ? true : this.state.hasPicture\n                });\n\n                this.handleSaveEdit();\n            }\n\n            const {id} = this.props.post;\n            CloudStorage.uploadPostImage(id, file!);\n            fileReader.readAsDataURL(file);\n        }\n    }\n\n    postImage_hasImageAndEditing = (picturePreviewURL: string) => {\n        return (\n            <div className=\"editingImagePost\">\n                <img className = 'postPicture' src={picturePreviewURL} />\n                <div className=\"postImageEditingButtons\">\n                    <IconButton \n                        aria-label=\"cancel upload picture\"\n                        onClick={this.handleDeletePicture}\n                        component=\"span\">\n                        <BlockIcon />\n                    </IconButton>\n\n                    <input\n                        accept=\"image/*\" \n                        className='inputUploadPicture'\n                        type=\"file\"\n                        id='post-inputImage'\n                        onChange = {newValue => this.handleChangePicture(newValue.target.files![0])} />\n                    <label htmlFor=\"post-inputImage\">\n                        <IconButton\n                            color=\"primary\"\n                            aria-label=\"upload picture\"\n                            component=\"span\">\n                            <SwapHorizIcon />\n                        </IconButton>\n                    </label>\n                </div>\n            </div>\n        );\n    }\n\n    postImage_hasntImageAndEditing = () => {\n        return (\n            <div>\n                <input\n                    accept=\"image/*\" \n                    className='inputUploadPicture'\n                    type=\"file\"\n                    id='post-insertNewImage'\n                    onChange = {newValue => this.handleChangePicture(newValue.target.files![0], true)} />\n                <label htmlFor=\"post-insertNewImage\">\n                <IconButton\n                    color=\"primary\"\n                    aria-label=\"upload picture\"\n                    component=\"span\">\n                    <PhotoCamera />\n                </IconButton>\n                </label>\n            </div>\n        );\n    }\n\n    postImage_hasImageAndNotEditing = (picturePreviewURL: string) => {\n        return (\n            <img className = 'postPicture' src={picturePreviewURL} />\n        );\n    }\n\n\n    userAvatar = (): Promise<any> => {\n        const {user} = this.props.post;\n\n        return new Promise<any>((resolve) => {\n            if (user.hasImage){\n                CloudStorage.downloadUserImage(user.id).then((pictureURL) => {\n                    resolve( (<Avatar alt={user.getFirstLetter()} src={pictureURL} />) )\n                });\n            }else{\n                resolve( <Avatar aria-label=\"recipe\"> {user.getFirstLetter()} </Avatar> );\n            }\n        });\n    }\n\n    render(){\n        const {post, userAuthenticated} = this.props;\n        const {displayDeleteDialog, editingPost, editingText, picturePreviewURL, userAvatar} = this.state;\n\n        let $postImage = null;\n        if (editingPost){\n            if (picturePreviewURL.length > 0){\n                $postImage = this.postImage_hasImageAndEditing(picturePreviewURL);\n            }else{\n                $postImage = this.postImage_hasntImageAndEditing();\n            }\n        }else{\n            $postImage = this.postImage_hasImageAndNotEditing(picturePreviewURL);\n        }\n\n        return(\n            <div className=\"postContainer\">\n\n                <Dialog\n                    open={displayDeleteDialog}\n                    onClose={this.handleCloseDeleteDialog}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\">\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {\"Confirm deletion of post?\"}\n                    </DialogTitle>\n                    \n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                        This action cannot be undone.\n                        </DialogContentText>\n                    </DialogContent>\n                    \n                    <DialogActions>\n                        <Button onClick={this.handleCloseDeleteDialog} color=\"primary\">\n                            No\n                        </Button>\n                        <Button onClick={this.confirmDelete} color=\"primary\" autoFocus>\n                            Yes\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Card className='cardContainer'>\n                    <CardHeader\n                        avatar = {userAvatar}\n                        title={post.user.getFullName()}\n                        subheader={Utilities.formatDate(post.getDate(), true)}/>\n                    \n                    <CardContent>\n                        {!editingPost ? (\n                            <div className=\"postContent\">\n                                {post.content}\n                                {$postImage}\n                            </div>\n                        ) : (\n                            <div className=\"editTextField\">\n                                <TextField\n                                    value={editingText}\n                                    multiline\n                                    error = {this.displayError(FIELD.POST_CONTENT)}\n                                    helperText = {this.displayHelperText(FIELD.POST_CONTENT)}\n                                    onChange={newValue => this.setState({editingText: newValue.target.value}) }/>\n\n                                {$postImage}\n                            </div>\n                        )}\n\n                    </CardContent>\n\n                    {userAuthenticated && userAuthenticated!.id === post.userStr &&\n                        <CardActions disableSpacing className = 'cardActions'>\n                            <div className=\"cardActions\">\n                                <IconButton onClick={this.handleEdit} aria-label=\"edit\">\n                                    <EditIcon />\n                                </IconButton>\n                                \n                                <IconButton onClick={this.handleOpenDeleteDialog} aria-label=\"delete\">\n                                    <DeleteForeverIcon />\n                                </IconButton>\n                            </div>\n\n                            {editingPost &&\n                                <div className=\"onlyEditingCardActions\">\n                                    <IconButton onClick={this.handleSaveEdit} aria-label=\"delete\">\n                                        <SaveIcon />\n                                    </IconButton>\n\n                                    <IconButton onClick={this.handleCancelEdit} aria-label=\"delete\">\n                                        <BlockIcon />\n                                    </IconButton>\n                                </div>\n                            }\n                        </CardActions>\n                    }\n\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default connect((state: IStore) => ({\n    userAuthenticated: state.userAuthenticated}) ) (PostComponent)","export default class PostEdited {\n    date: Date;\n    content: string;\n\n    constructor(date: Date, content: string){\n        this.date = date;\n        this.content = content;\n    }\n}","// React Imports\nimport React, {Component} from 'react';\nimport { PossibleRoutes } from '../../Routes';\n\n// Redux\nimport { connect } from 'react-redux';\nimport store, { IStore } from '../../Store/index';\nimport * as Actions from '../../Store/actions';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n// Components\nimport CreatePost from '../../Components/CreatePost';\nimport PostComponent from '../../Components/PostComponent';\n\n// Model\nimport Post, { PostVisibility } from '../../Model/Post';\nimport User from '../../Model/User';\n\n// Services\nimport {PostDB} from '../../Services/Firebase/Database/PostDB';\nimport { UserDB } from '../../Services/Firebase/Database/UserDB';\nimport {CloudStorage} from '../../Services/Firebase/CloudStorage';\n\n// Icons\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nenum ViewOption{\n    AllPosts,\n    Public,\n    Private,\n    My,\n    FromOther\n}\n\ninterface IProps {\n    dispatch: any,\n    posts?: Array<Post>,\n    userAuthenticated?: User,\n    history: any\n}\n\ninterface IState {\n    viewOption: ViewOption,\n    posts: Array<Post>,\n    userAvatar: any\n}\n\nclass Home extends Component<IProps, IState> {\n    constructor(props: IProps){\n        super(props);\n\n        this.state = {\n            viewOption: ViewOption.AllPosts,\n            posts: new Array<Post>(),\n            userAvatar: undefined\n        };\n    }\n\n    componentDidMount = async() => {\n        if ( !(store.getState() as IStore).userAuthenticated ){\n            const userID = localStorage.getItem('@SocialNetwork/uid');\n            if (userID){\n                const user = await UserDB.getUser(userID);\n                this.props.dispatch(Actions.login(user));\n            }\n        }\n\n        const avatar = await this.userAvatar();\n        this.setState({userAvatar: avatar});\n\n        this.loadPostsFromDB();\n    }\n\n    loadPostsFromDB = async () => {\n        const {userAuthenticated} = this.props;\n\n        let posts: Array<Post> = await PostDB.getAvailablePosts(userAuthenticated ? userAuthenticated!.id : '');\n        this.props.dispatch(Actions.refreshPosts(posts));\n        this.loadPostsAccordingToViewOption();\n    }\n\n    handleLogoff = () => {\n        localStorage.removeItem('@SocialNetwork/uid');\n        this.props.dispatch(Actions.logoff());\n        this.props.history.push(PossibleRoutes.LOGIN);\n    }\n\n    loadPostsAccordingToViewOption = () => {\n        const {posts, userAuthenticated} = this.props;\n        const {viewOption} = this.state;\n        \n        let newPosts: Array<Post> = new Array<Post>();\n\n        switch(viewOption){\n            case ViewOption.AllPosts: {\n                newPosts = posts!;\n                break;\n            }\n\n            case ViewOption.My: {\n                newPosts = posts!.filter(find => find.userStr === userAuthenticated!.id);\n                break;\n            }\n\n            case ViewOption.Private: {\n                newPosts = posts!.filter(find => find.visibility === PostVisibility.PRIVATE);\n                break;\n            }\n\n            case ViewOption.Public: {\n                newPosts = posts!.filter(find => find.visibility === PostVisibility.PUBLIC);\n                break;\n            }\n\n            case ViewOption.FromOther: {\n                newPosts = posts!.filter(find => find.userStr !== userAuthenticated!.id);\n                break;\n            }\n        }\n\n        this.setState({posts: newPosts});\n    }\n\n    setViewOption = (newViewOption: ViewOption) => {\n        this.setState({viewOption: newViewOption}, () => this.loadPostsAccordingToViewOption());\n    }\n\n    userAvatar = (): Promise<any> => {\n        const {userAuthenticated} = this.props;\n\n        return new Promise<any>((resolve) => {\n            if (userAuthenticated!.hasImage){\n                CloudStorage.downloadUserImage(userAuthenticated!.id).then((pictureURL) => {\n                    resolve( (<Avatar alt={userAuthenticated!.getFirstLetter()} src={pictureURL} />) )\n                });\n            }else{\n                resolve( <Avatar aria-label=\"recipe\"> {userAuthenticated!.getFirstLetter()} </Avatar> );\n            }\n        });\n    }\n\n    render(){\n        let {userAuthenticated} = this.props;\n        const {viewOption, posts, userAvatar} = this.state;\n\n        const componentPosts =  posts.map((post, key) => \n                                    <PostComponent\n                                        key = {post.id}\n                                        post = {post}/>\n                                );\n\n\n\n        return(\n            <div className=\"homePageContainer\">\n\n                {userAuthenticated &&\n                    <div className=\"onlyAuthenticated\">\n                        <div className=\"headerContainer\">\n                            <div className=\"profileContainer\">\n                                {userAvatar}\n                                <div className=\"profileName\">\n                                    {userAuthenticated!.getFullName()}\n                                </div>\n                            </div>\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={this.handleLogoff}\n                                startIcon={<ExitToAppIcon />}>\n                                Logoff\n                            </Button>\n\n                        </div>\n\n                        <CreatePost/>\n                    </div>\n                }\n                \n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <div className=\"appToolbar\">\n                            <div>\n                                <Typography variant=\"h5\">\n                                    Timeline\n                                </Typography>\n                            </div>\n                        \n                            <div className=\"viewOptions\">\n                                <FormControlLabel\n                                    value=\"start\"\n                                    control={<Radio \n                                        onClick = {() => this.setViewOption(ViewOption.AllPosts)}\n                                        checked = {viewOption === ViewOption.AllPosts}/>\n                                    }\n                                    label=\"All posts\"\n                                    labelPlacement=\"start\"/>\n\n                                <FormControlLabel\n                                    value=\"start\"\n                                    control={<Radio \n                                        onClick = {() => this.setViewOption(ViewOption.Public)}\n                                        checked = {viewOption === ViewOption.Public}/>\n                                    }\n                                    label=\"Public posts\"\n                                    labelPlacement=\"start\"/>\n\n                                <FormControlLabel\n                                    disabled = {userAuthenticated === undefined}\n                                    value=\"start\"\n                                    control={<Radio \n                                        onClick = {() => this.setViewOption(ViewOption.Private)}\n                                        checked = {viewOption === ViewOption.Private}/>\n                                    }\n                                    label=\"Private posts\"\n                                    labelPlacement=\"start\"/>\n\n                                <FormControlLabel\n                                    disabled = {userAuthenticated === undefined}\n                                    value=\"start\"\n                                    control={<Radio \n                                        onClick = {() => this.setViewOption(ViewOption.My)}\n                                        checked = {viewOption === ViewOption.My}/>\n                                    }\n                                    label=\"My posts\"\n                                    labelPlacement=\"start\"/>\n\n                                <FormControlLabel\n                                    disabled = {userAuthenticated === undefined}\n                                    value=\"start\"\n                                    control={<Radio \n                                        onClick = {() => this.setViewOption(ViewOption.FromOther)}\n                                        checked = {viewOption === ViewOption.FromOther}/>\n                                    }\n                                    label=\"From another\"\n                                    labelPlacement=\"start\"/>\n\n                            </div>\n\n                        </div>\n\n                    </Toolbar>\n                </AppBar>\n\n                {componentPosts}\n            </div>\n        );\n    }\n}\n\nexport default connect((state: IStore) => ({\n    posts: state.posts,\n    userAuthenticated: state.userAuthenticated}) ) (Home)","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from './Store';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Login from './Pages/Login';\nimport Home from './Pages/Home';\nimport Profile from './Pages/Profile';\nimport NotFound from './Pages/NotFound';\n\nexport enum PossibleRoutes{\n    LOGIN = '/login',\n    HOME = '/home',\n    PROFILE = '/profile'\n}\n\nexport default function Routes(){\n    return(\n        <Provider store={store} >\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path='/' exact component={Login}/>\n                    <Route path={PossibleRoutes.LOGIN} component={Login}/>\n                    <Route path={PossibleRoutes.HOME} component={Home}/>\n                    <Route path={PossibleRoutes.PROFILE} component={Profile}/>\n                    <Route component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    )\n}","// React Imports\nimport React from 'react';\n\n// Styles\nimport './styles.css'\n\n// Material-UI Components\n\n// Components\n\n// Model\n\n// Services\n\n// Icons\n\n\nexport default function Profile(){\n    return (\n        <h1>Hello World! Profile</h1>\n    );\n}","// React Imports\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function NotFound(){\n    return (\n        <h1 style={{textAlign:\"center\"}}>\n            Page not Found<br/>\n            <Link to=\"/\">Go to Home </Link>\n        </h1>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './Pages/old/App';\nimport Routes from './Routes';\n\nimport './Styles/general.css';\n\nReactDOM.render(<Routes/>, document.getElementById('root'));"],"sourceRoot":""}